#!/usr/bin/env python3

from subprocess import check_output
import re
import json
import argparse
import sys


def get_zpool_list():
    return [name.split()[0] for name in check_output(['zpool', 'list', '-H']).decode('utf-8').split('\n')[:-1]]


def get_zpool_status(pool_names):
    system_zpools = get_zpool_list()
    if type(pool_names) is not list:
        pool_names = system_zpools
    
    for pool in pool_names:
        if type(pool) is not str:
            continue
        if pool not in system_zpools:
            raise Exception("pool %s does not exists on the system. chech the list: %s" % (pool, system_zpools))
        zpool_status = check_output(['zpool', 'status', pool]).decode('utf-8')
        st = [value for value in
            [stat.strip() for stat in   ## -- strip strings like "  " to "" <- empty strings
                re.split(r'(config:)|(errors:)|(state:)|(status:)|(pool:)|(action:)|(scan:)', zpool_status) 
                if type(stat) is str]   ## -- discard "None" types 
            if value]                   ## -- discard "" <- empty strings

        stat_dict = {}

        for idx, line in enumerate(st[1::2]):
            stat_dict[st[idx*2]] = line

        yield stat_dict


def parse_scan_string(string):
    if type(string) is not str:
        return None
    scan = [v.strip() for v in re.split(r'on ?(Sun.*|Mon.*|Tue.*|Wed.*|Ths.*|Fri.*)', string) if v.strip()]
    if len(scan) is 1:
        return scan[0]
    if len(scan) is 2:
        return {
                'msg': scan[0],
                'timestamp': scan[1]
                }
    else:
        return None


def parse_config_string(string):
    if type(string) is not str:
        return None
    config = {}
    header = []
    parent = ""
    sub_parent = ""
    for idx, line in enumerate(string.split('\n')):
        params = line.split()

        if idx is 0:
            header = [param.strip() for param in params]
            continue

        if idx is 1:
            parent = params[0]
            config[parent] = {}

        if re.match(r'mirror-[0-9]*|raidz[0-9]*-[0-9]*', params[0]):
           sub_parent = params[0]
           config[parent][sub_parent] = {}

        for idxx, param in enumerate(params):

            if idxx is 0 and params[0] == parent:
                config[params[0]] = {}
                continue

            if idxx is 0 and params[0] == sub_parent:
                config[parent][params[0]] = {}
                continue

            if idxx is 0 and params[0] not in [parent, sub_parent]:
                config[parent][sub_parent][params[0]] = {}
                continue

            if params[0] == parent:
                config[params[0]][header[idxx]] = param

            if params[0] == sub_parent:
                config[parent][params[0]][header[idxx]] = param

            if params[0] not in [parent, sub_parent]:
                config[parent][sub_parent][params[0]][header[idxx]] = param
                
    return config


def create_zpool_dict(stat_dict):
    if type(stat_dict) is not dict:
        return None

    zpool_status = {
        'pool': stat_dict['pool:'],
        'state': stat_dict['state:'],
        'status': stat_dict['status:'],
        'action': stat_dict['action:'],
        'scan': parse_scan_string(stat_dict['scan:']),
        'config': parse_config_string(stat_dict['config:']),
        'errors': stat_dict['errors:'],
        }

    return zpool_status


def main():
    iterator = sys.argv[1:] if (len(sys.argv) > 1) else None    ## this will automatically be set to all pools in the "get_zpool_status()" function.
    for status in get_zpool_status(iterator):
        print(json.dumps(create_zpool_dict(status), indent=4).replace('\\n', '\n').replace('\\t', '\t'))
    

if __name__ == '__main__':
    exit(main())
